[{"/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/index.js":"1","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/App.js":"2","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js":"3","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/constants.js":"4","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js":"5","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js":"6"},{"size":219,"mtime":1662852390371,"results":"7","hashOfConfig":"8"},{"size":7606,"mtime":1662955547065,"results":"9","hashOfConfig":"8"},{"size":5712,"mtime":1662955399540,"results":"10","hashOfConfig":"8"},{"size":660,"mtime":1662981965913,"results":"11","hashOfConfig":"8"},{"size":7065,"mtime":1662955489590,"results":"12","hashOfConfig":"8"},{"size":261,"mtime":1662852390369,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"admcs",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/index.js",[],["29","30"],"/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/App.js",[],"/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js",["31","32"],"// index.js\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\n// SelectCharacter コンポーネントを定義しています。\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    // Minting の状態保存する状態変数を初期化します。\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n   \n    // NFT を Mint します。\n    const mintCharacterNFTAction = (characterId) => async () => {\n      try {\n        if (gameContract) {\n          // Mint が開始されたら、ローディングマークを表示する。\n          setMintingCharacter(true);\n\n          console.log(\"Minting character in progress...\");\n          const mintTxn = await gameContract.mintCharacterNFT(characterId);\n          await mintTxn.wait();\n          console.log(\"mintTxn:\", mintTxn);\n          // Mint が終了したら、ローディングマークを消す。\n          setMintingCharacter(false);\n        }\n      } catch (error) {\n        console.warn(\"MintCharacterAction Error:\", error);\n        // エラーが発生した場合も、ローディングマークを消す。\n        setMintingCharacter(false);\n      }\n    };\n    // ページがロードされた瞬間に下記を実行します。\n    useEffect(() => {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const gameContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicGame.abi,\n          signer\n        );\n  \n        // gameContract の状態を更新します。\n        setGameContract(gameContract);\n      } else {\n        console.log(\"Ethereum object not found\");\n      }\n    }, []);\n    useEffect(() => {\n        // NFT キャラクターのデータをスマートコントラクトから取得します。\n        const getCharacters = async () => {\n          try {\n            console.log(\"Getting contract characters to mint\");\n      \n            // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n            const charactersTxn = await gameContract.getAllDefaultCharacters();\n      \n            console.log(\"charactersTxn:\", charactersTxn);\n      \n            // すべてのNFTキャラクターのデータを変換します。\n            const characters = charactersTxn.map((characterData) =>\n              transformCharacterData(characterData)\n            );\n      \n            // ミント可能なすべてのNFTキャラクターの状態を設定します。\n            setCharacters(characters);\n          } catch (error) {\n            console.error(\"Something went wrong fetching characters:\", error);\n          }\n        };\n      \n        // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n          console.log(\n            `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n          );\n          // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n          if (gameContract) {\n            const characterNFT = await gameContract.checkIfUserHasNFT();\n            console.log(\"CharacterNFT: \", characterNFT);\n            setCharacterNFT(transformCharacterData(characterNFT));\n          }\n        };\n      \n        if (gameContract) {\n          getCharacters();\n          // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n          gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n        }\n      \n        return () => {\n          // コンポーネントがマウントされたら、リスナーを停止する。\n      \n          if (gameContract) {\n            gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n          }\n        };\n    }, [gameContract]);\n    const renderCharacters = () =>\n        characters.map((character, index) => (\n            <div className=\"character-item\" key={character.name}>\n            <div className=\"name-container\">\n                <p>{character.name}</p>\n            </div>\n            <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} />\n            <button\n                type=\"button\"\n                className=\"character-mint-button\"\n                onClick={mintCharacterNFTAction(index)}\n            >{`Mint ${character.name}`}</button>\n            </div>\n    ));\n    return (\n      <div className=\"select-character-container\">\n        <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n        {characters.length > 0 && (\n          <div className=\"character-grid\">{renderCharacters()}</div>\n        )}\n        {/* mintingCharacter = trueの場合のみ、ローディングマークを表示します。*/}\n        {mintingCharacter && (\n          <div className=\"loading\">\n            <div className=\"indicator\">\n              <LoadingIndicator />\n              <p>Minting In Progress...</p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n    \n};\nexport default SelectCharacter;\n","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/constants.js",[],"/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js",["33"],"// index.js\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n    // コントラクトのデータを保有する状態変数を初期化します。\n    const [gameContract, setGameContract] = useState(null);\n    // ボスのメタデータを保存する状態変数を初期化します。\n    const [boss, setBoss] = useState(null);\n    // 攻撃の状態を保存する変数を初期化します。\n    const [attackState, setAttackState] = useState(\"\");\n    // 攻撃ダメージの表示形式を保存する変数を初期化します。\n    const [showToast, setShowToast] = useState(false);\n\n    // ボスを攻撃する関数を設定します。\n    const runAttackAction = async () => {\n      try {\n        // コントラクトが呼び出されたことを確認します。\n        if (gameContract) {\n          // attackState の状態を attacking に設定します。\n          setAttackState(\"attacking\");\n          console.log(\"Attacking boss...\");\n    \n          // NFT キャラクターがボスを攻撃します。\n          const attackTxn = await gameContract.attackBoss();\n    \n          // トランザクションがマイニングされるまで待ちます。\n          await attackTxn.wait();\n          console.log(\"attackTxn:\", attackTxn);\n    \n          // attackState の状態を hit に設定します。\n          setAttackState(\"hit\");\n    \n          // 攻撃ダメージの表示を true に設定し（表示）、5秒後に false に設定する（非表示）\n          setShowToast(true);\n          setTimeout(() => {\n            setShowToast(false);\n          }, 5000);\n        }\n      } catch (error) {\n        console.error(\"Error attacking boss:\", error);\n        setAttackState(\"\");\n      }\n    };\n    // ページがロードされると下記が実行されます。\n    useEffect(() => {\n        // ボスのデータをコントラクトから読み込む関数を設定します。\n        const fetchBoss = async () => {\n        //ボスのメタデータをコントラクトをから呼び出します。\n        const bossTxn = await gameContract.getBigBoss();\n        console.log(\"Boss:\", bossTxn);\n        // ボスの状態を設定します。\n        setBoss(transformCharacterData(bossTxn));\n        };\n    \n        // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n        // ボスの新しいHPを取得します。\n        const bossHp = newBossHp.toNumber();\n        // NFT キャラクターの新しいHPを取得します。\n        const playerHp = newPlayerHp.toNumber();\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n    \n        // NFT キャラクターとボスのHPを更新します。\n        setBoss((prevState) => {\n            return { ...prevState, hp: bossHp };\n        });\n        setCharacterNFT((prevState) => {\n            return { ...prevState, hp: playerHp };\n        });\n        };\n    \n        // コントラクトが呼び出されていたら、下記を実行します。\n        if (gameContract) {\n        fetchBoss();\n        // リスナーの設定：ボスが攻撃された通知を受け取ります。\n        gameContract.on(\"AttackComplete\", onAttackComplete);\n        }\n    \n        // コンポーネントがマウントされたら、リスナーを停止する。\n        return () => {\n        if (gameContract) {\n            gameContract.off(\"AttackComplete\", onAttackComplete);\n        }\n        };\n    }, [gameContract]);\n  // ページがロードされると下記が実行されます。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  return (\n    <div className=\"arena-container\">\n      {/* 攻撃ダメージの通知を追加します */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {/* ボスをレンダリングします */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {/* Attack ボタンの下にローディングマークを追加します*/}\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n      {/* NFT キャラクター をレンダリングします*/}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Arena;","/Users/masaru/Documents/web3/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":103,"column":8,"nodeType":"40","endLine":103,"endColumn":22,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":110,"column":13,"nodeType":"44","endLine":110,"endColumn":83},{"ruleId":"38","severity":1,"message":"39","line":90,"column":8,"nodeType":"40","endLine":90,"endColumn":22,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCharacterNFT'. Either include it or remove the dependency array. If 'setCharacterNFT' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"50","fix":"52"},"Update the dependencies array to be: [gameContract, setCharacterNFT]",{"range":"53","text":"54"},{"range":"55","text":"54"},[3677,3691],"[gameContract, setCharacterNFT]",[2992,3006]]